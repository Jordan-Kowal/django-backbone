"""
Django settings for our project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""


# Built-in
import os
import sys

# --------------------------------------------------------------------------------
# > Applications
# --------------------------------------------------------------------------------
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Directories that will be searched for apps
# sys.path.insert(0, os.path.join(BASE_DIR, "api"))
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.sitemaps",
    "django.contrib.sites",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "jklib",
    "rest_framework",
]

CUSTOM_APPS = [
    "core",
    "users",
    "contact",
    "healthchecks",
    "security",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 'django.middleware.locale.LocaleMiddleware',  # Required for translations to work
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_backbone.urls"

WSGI_APPLICATION = "django_backbone.wsgi.application"


# --------------------------------------------------------------------------------
# > DRF
# --------------------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAdminUser",  # Root and default access
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# DRF additional settings
DRF_GLOBAL_PERMISSIONS = None


# --------------------------------------------------------------------------------
# > Passwords and logins
# --------------------------------------------------------------------------------
AUTH_USER_MODEL = "users.User"

# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 10,},
    },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# --------------------------------------------------------------------------------
# > Templates and static files
# --------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

EMAIL_CSS = "core/css/emails.css"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(
                BASE_DIR, "templates"
            ),  # The root /template is also searched for templates
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# --------------------------------------------------------------------------------
# > Logging
# --------------------------------------------------------------------------------
# That folder contains a README.md file, check it out
LOG_ROOT = os.path.join(BASE_DIR, "logs/")

MAX_SIZE = 2_000_000  # 2Mo
BACKUP_COUNT = 2

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "{asctime} | {levelname} | {message}", "style": "{",},
        "verbose": {
            "format": "{asctime} | {levelname} | {module} | {process:d} | {thread:d} | {message}",
            "style": "{",
        },
    },
    "filters": {},
    "handlers": {
        # Outputs everything in the stderr
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # Default file logger for generic information
        "console.log": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_ROOT, "console.log"),
            "maxBytes": MAX_SIZE,
            "backupCount": BACKUP_COUNT,
        },
        # File to log detailed debug messages
        "debug.log": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": os.path.join(LOG_ROOT, "debug.log"),
            "maxBytes": MAX_SIZE,
            "backupCount": BACKUP_COUNT,
        },
        # File specifically for healthcheck messages
        "healthchecks.log": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_ROOT, "healthchecks.log"),
            "maxBytes": MAX_SIZE,
            "backupCount": BACKUP_COUNT,
        },
        # File specifically for healthcheck messages
        "security.log": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_ROOT, "security.log"),
            "maxBytes": MAX_SIZE,
            "backupCount": BACKUP_COUNT,
        },
    },
    "loggers": {
        "debugger": {
            "handlers": ["console", "debug.log"],
            "level": "DEBUG",
            "propagate": True,
        },
        "default": {"handlers": ["console.log"], "level": "INFO", "propagate": True,},
        "healthcheck": {
            "handlers": ["healthchecks.log"],
            "level": "INFO",
            "propagate": True,
        },
        "security": {"handlers": ["security.log"], "level": "INFO", "propagate": True,},
    },
}


# --------------------------------------------------------------------------------
# > Internationalization
# --------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGES = (("en-us", "English"),)


# --------------------------------------------------------------------------------
# > Model settings
# --------------------------------------------------------------------------------
# Contact
CONTACT_RETENTION_DAYS = 30  # days
CONTACT_API_BAN_SETTINGS = {
    "max_requests": 3,
    "day_range": 30,  # days
    "ban_duration": 30,  # days
}

# NetworkRule
NETWORK_RULE_DEFAULT_DURATION = 30  # days


# --------------------------------------------------------------------------------
# > Others
# --------------------------------------------------------------------------------
FIRST_DAY_OF_WEEK = 1
SITE_ID = 1


# --------------------------------------------------------------------------------
# > Local settings
# --------------------------------------------------------------------------------
try:
    # Local
    from .local_settings import *
except ImportError as e:
    print(e)
    sys.exit(0)
