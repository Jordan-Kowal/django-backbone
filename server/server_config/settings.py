"""
Django settings for our project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""


# Built-in
import os
import sys

# --------------------------------------------------------------------------------
# > Directories
# --------------------------------------------------------------------------------
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")


# --------------------------------------------------------------------------------
# > Applications
# --------------------------------------------------------------------------------
# Directories that will be searched for apps
# sys.path.insert(0, os.path.join(BASE_DIR, "api"))

INSTALLED_APPS = [
    # --------------------
    # Django
    # --------------------
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.sitemaps",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    # --------------------
    # Third-party
    # --------------------
    "jklib",
    "rest_framework",
    # --------------------
    # API
    # --------------------
    "api.core",
    "api.users",
    "api.contact",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 'django.middleware.locale.LocaleMiddleware',  # Required for translations to work
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server_config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(
                BASE_DIR, "templates"
            ),  # The root /template is also searched for templates
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server_config.wsgi.application"


# --------------------------------------------------------------------------------
# > DRF
# --------------------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAdminUser",  # Root and default access
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# DRF additional settings
DRF_GLOBAL_PERMISSIONS = None


# --------------------------------------------------------------------------------
# > Password and logins
# --------------------------------------------------------------------------------
LOGIN_URL = "user_login"
LOGIN_REDIRECT_URL = "user_account"

# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 10,},
    },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# --------------------------------------------------------------------------------
# > Internationalization
# --------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGES = (("en-us", "English"),)


# --------------------------------------------------------------------------------
# > Others
# --------------------------------------------------------------------------------
FIRST_DAY_OF_WEEK = 1
SITE_ID = 1
EMAIL_CSS = "core/css/emails.css"


# --------------------------------------------------------------------------------
# > Model settings
# --------------------------------------------------------------------------------
# Contact
CONTACT_RETENTION_DAYS = 30  # days
CONTACT_API_BAN_SETTINGS = {
    "max_requests": 3,
    "day_range": 30,  # days
    "ban_duration": 30,  # days
}

# NetworkRule
NETWORK_RULE_DEFAULT_DURATION = 30  # days

LOG_ROOT = os.path.join(BASE_DIR, "logs/")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "{asctime} {levelname} {message}", "style": "{",},
        "verbose": {
            "format": "{asctime} {levelname} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "filters": {},
    "handlers": {
        # Outputs everything in the stderr
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # File to log detailed debug messages
        "debug_filer": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "formatter": "verbose",
            "filename": os.path.join(LOG_ROOT, "debug.log"),
        },
        # Default file logger for generic information
        "default_filer": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_ROOT, "console.log"),
        },
        # File specifically for healthcheck messages
        "healthcheck_filer": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_ROOT, "healthchecks.log"),
        },
    },
    "loggers": {
        "debugger": {
            "handlers": ["console", "debug_filer"],
            "level": "DEBUG",
            "propagate": True,
        },
        "default": {"handlers": ["default_filer"], "level": "INFO", "propagate": True,},
        "healthcheck": {
            "handlers": ["healthcheck_filer"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# --------------------------------------------------------------------------------
# > Local settings
# --------------------------------------------------------------------------------
try:
    from .local_settings import *
except ImportError as e:
    print(e)
    sys.exit(0)
